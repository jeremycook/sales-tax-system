##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
server {
    listen   80 default_server;
    # listen [::]:80 default_server deferred;
    return   444;
}

server {
    listen   443 ssl;
    # listen [::]:80 default_server deferred;

    # the preferred solution for when nginx 1.19.4+ becomes available
    # ssl_reject_handshake on;

    # hack
    ssl_ciphers aNULL;
    ssl_certificate /etc/nginx/stub-cert.pem;
    ssl_certificate_key /etc/nginx/stub-key.pem;
    return   444;
}

# anywhereusa.cohub.us
server {
    server_name   anywhereusa.cohub.us;
    client_max_body_size 100m;
    large_client_header_buffers 4 16k;
    proxy_connect_timeout  600;
    proxy_send_timeout     600;
    proxy_read_timeout     600;
    send_timeout           600;
    location / {
        proxy_pass         http://localhost:5002;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $host;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/anywhereusa.cohub.us/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/anywhereusa.cohub.us/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = anywhereusa.cohub.us) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name   anywhereusa.cohub.us;
    listen 80;
    return 404; # managed by Certbot
}

# test-anywhereusa.cohub.us
server {
    server_name   test-anywhereusa.cohub.us;
    client_max_body_size 100m;
    large_client_header_buffers 4 16k;
    proxy_connect_timeout  600;
    proxy_send_timeout    600;
    proxy_read_timeout    600;
    send_timeout      600;
    location / {
        proxy_pass         http://localhost:5000;
        proxy_http_version 1.1;
        proxy_set_header   Upgrade $http_upgrade;
        proxy_set_header   Connection keep-alive;
        proxy_set_header   Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $host;
        proxy_set_header   X-Forwarded-Proto $scheme;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/test-anywhereusa.cohub.us/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/test-anywhereusa.cohub.us/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = test-anywhereusa.cohub.us) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen        80;
    server_name   test-anywhereusa.cohub.us;
    return 404; # managed by Certbot
}


#server {
#	listen 80 default_server;
#	listen [::]:80 default_server;
#
#	# SSL configuration
#	#
#	# listen 443 ssl default_server;
#	# listen [::]:443 ssl default_server;
#	#
#	# Note: You should disable gzip for SSL traffic.
#	# See: https://bugs.debian.org/773332
#	#
#	# Read up on ssl_ciphers to ensure a secure configuration.
#	# See: https://bugs.debian.org/765782
#	#
#	# Self signed certs generated by the ssl-cert package
#	# Don't use them in a production server!
#	#
#	# include snippets/snakeoil.conf;
#
#	root /var/www/html;
#
#	# Add index.php to the list if you are using PHP
#	index index.html index.htm index.nginx-debian.html;
#
#	server_name _;
#
#	location / {
#		# First attempt to serve request as file, then
#		# as directory, then fall back to displaying a 404.
#		try_files $uri $uri/ =404;
#	}
#
#	# pass PHP scripts to FastCGI server
#	#
#	#location ~ \.php$ {
#	#	include snippets/fastcgi-php.conf;
#	#
#	#	# With php-fpm (or other unix sockets):
#	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
#	#	# With php-cgi (or other tcp sockets):
#	#	fastcgi_pass 127.0.0.1:9000;
#	#}
#
#	# deny access to .htaccess files, if Apache's document root
#	# concurs with nginx's one
#	#
#	#location ~ /\.ht {
#	#	deny all;
#	#}
#}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
