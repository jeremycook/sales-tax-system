// <auto-generated />
using System;
using Cohub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Cohub.Data.PostgreSQL.Migrations
{
    [DbContext(typeof(CohubDbContext))]
    [Migration("20210111141048_5")]
    partial class _5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Cohub.Data.Fin.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<decimal>("DepositControlAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("deposit_control_amount");

                    b.Property<bool>("IsBalanced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_balanced");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTimeOffset?>("Posted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted");

                    b.Property<decimal?>("TotalDeposited")
                        .HasColumnType("numeric")
                        .HasColumnName("total_deposited");

                    b.Property<decimal?>("TotalRevenueAndOverpayment")
                        .HasColumnType("numeric")
                        .HasColumnName("total_revenue_and_overpayment");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("batch", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.BatchComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BatchId")
                        .HasColumnType("integer")
                        .HasColumnName("batch_id");

                    b.Property<int>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreatedById");

                    b.ToTable("batch_comment", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Bucket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("bucket", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.ToTable("category", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Filing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("FilingDate")
                        .HasColumnType("date")
                        .HasColumnName("filing_date");

                    b.Property<int>("ReturnId")
                        .HasColumnType("integer")
                        .HasColumnName("return_id");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("ReturnId");

                    b.ToTable("filing", "fin");

                    b.HasDiscriminator<string>("TypeId").HasValue("Filing");
                });

            modelBuilder.Entity("Cohub.Data.Fin.FilingSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.Property<int>("PaymentChartId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_chart_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("PaymentChartId");

                    b.HasIndex("OrganizationId", "PaymentChartId", "StartDate")
                        .IsUnique();

                    b.ToTable("filing_schedule", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Frequency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PeriodIdFormat")
                        .HasColumnType("text")
                        .HasColumnName("period_id_format");

                    b.Property<string>("PeriodNameFormat")
                        .HasColumnType("text")
                        .HasColumnName("period_name_format");

                    b.HasKey("Id");

                    b.ToTable("frequency", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.PaymentChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FrequencyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("frequency_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("payment_chart", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.PaymentConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<decimal>("EstimatedNetAmountDuePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("estimated_net_amount_due_percentage");

                    b.Property<decimal>("InterestPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("interest_percentage");

                    b.Property<decimal>("MinimumEstimatedNetAmountDue")
                        .HasColumnType("numeric")
                        .HasColumnName("minimum_estimated_net_amount_due");

                    b.Property<int>("PaymentChartId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_chart_id");

                    b.Property<decimal>("PenaltyPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("penalty_percentage");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_percentage");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<decimal>("VendorFeeMax")
                        .HasColumnType("numeric")
                        .HasColumnName("vendor_fee_max");

                    b.Property<decimal>("VendorFeePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("vendor_fee_percentage");

                    b.HasKey("Id");

                    b.HasIndex("PaymentChartId");

                    b.ToTable("payment_configuration", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Period", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("FrequencyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("frequency_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("EndDate");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("StartDate");

                    b.ToTable("period", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("period_id");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("StatusId");

                    b.HasIndex("OrganizationId", "CategoryId", "PeriodId")
                        .IsUnique();

                    b.ToTable("return", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.ReturnComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<int>("ReturnId")
                        .HasColumnType("integer")
                        .HasColumnName("return_id");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReturnId");

                    b.ToTable("return_comment", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.ReturnLabel", b =>
                {
                    b.Property<int>("ReturnId")
                        .HasColumnType("integer")
                        .HasColumnName("return_id");

                    b.Property<string>("LabelId")
                        .HasColumnType("text")
                        .HasColumnName("label_id");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ReturnId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("return_label", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.ReturnStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("return_status", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Statement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("AssessmentDueDate")
                        .HasColumnType("date")
                        .HasColumnName("assessment_due_date");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<decimal?>("GrandTotalDue")
                        .HasColumnType("numeric")
                        .HasColumnName("grand_total_due");

                    b.Property<DateTime>("NoticeDate")
                        .HasColumnType("date")
                        .HasColumnName("notice_date");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.Property<decimal>("OverpaymentBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("overpayment_balance");

                    b.Property<string>("StatusId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_id");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("statement", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.StatementComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("StatementId")
                        .HasColumnType("integer")
                        .HasColumnName("statement_id");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("StatementId");

                    b.ToTable("statement_comment", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.StatementDue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("BucketId")
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<bool>("HasFiled")
                        .HasColumnType("boolean")
                        .HasColumnName("has_filed");

                    b.Property<decimal>("InterestDue")
                        .HasColumnType("numeric")
                        .HasColumnName("interest_due");

                    b.Property<decimal>("NetDue")
                        .HasColumnType("numeric")
                        .HasColumnName("net_due");

                    b.Property<decimal>("PenaltyDue")
                        .HasColumnType("numeric")
                        .HasColumnName("penalty_due");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("period_id");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("integer")
                        .HasColumnName("return_id");

                    b.Property<int>("StatementId")
                        .HasColumnType("integer")
                        .HasColumnName("statement_id");

                    b.Property<string>("StatementReasonCodeId")
                        .HasColumnType("text")
                        .HasColumnName("statement_reason_code_id");

                    b.Property<string>("SubcategoryId")
                        .HasColumnType("text")
                        .HasColumnName("subcategory_id");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("numeric")
                        .HasColumnName("total_due");

                    b.HasKey("Id");

                    b.HasIndex("BucketId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReturnId");

                    b.HasIndex("StatementId");

                    b.HasIndex("StatementReasonCodeId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("statement_due", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.StatementReasonCode", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("statement_reason_code", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Subcategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.HasKey("Id");

                    b.ToTable("subcategory", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BatchId")
                        .HasColumnType("integer")
                        .HasColumnName("batch_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<decimal?>("Deposited")
                        .HasColumnType("numeric")
                        .HasColumnName("deposited");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<decimal?>("RevenueAndOverpayment")
                        .HasColumnType("numeric")
                        .HasColumnName("revenue_and_overpayment");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.ToTable("transaction", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Fin.TransactionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("BucketId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bucket_id");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("effective_date");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.Property<string>("PeriodId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("period_id");

                    b.Property<string>("SubcategoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subcategory_id");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("BucketId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("TransactionId");

                    b.ToTable("transaction_detail", "fin");
                });

            modelBuilder.Entity("Cohub.Data.Geo.Locale", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("locale", "geo");
                });

            modelBuilder.Entity("Cohub.Data.Geo.State", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("state", "geo");
                });

            modelBuilder.Entity("Cohub.Data.Geo.Tz", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("tz", "geo");
                });

            modelBuilder.Entity("Cohub.Data.Ins.QueryDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sql");

                    b.HasKey("Id");

                    b
                        .HasAnnotation("Relational:SqlQuery", "select t.table_name id, pg_get_viewdef(t.table_schema || '.' || t.table_name, true) as sql\r\nfrom information_schema.\"tables\" t\r\nwhere t.table_schema = 'qry'\r\norder by t.table_name");
                });

            modelBuilder.Entity("Cohub.Data.Ins.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("QueryDefinitionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("query_definition_id");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("QueryDefinitionId");

                    b.ToTable("report", "ins");
                });

            modelBuilder.Entity("Cohub.Data.Lic.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("issued_date");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TypeId", "Title")
                        .IsUnique();

                    b.ToTable("license", "lic");
                });

            modelBuilder.Entity("Cohub.Data.Lic.LicenseType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.ToTable("license_type", "lic");
                });

            modelBuilder.Entity("Cohub.Data.Org.Label", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("Title");

                    b.HasIndex("UpdatedById");

                    b.ToTable("label", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("id");

                    b.Property<string>("ClassificationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("classification_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Dba")
                        .HasColumnType("text")
                        .HasColumnName("dba");

                    b.Property<string>("FederalID")
                        .HasColumnType("text")
                        .HasColumnName("federal_id");

                    b.Property<string>("OrganizationDescription")
                        .HasColumnType("text")
                        .HasColumnName("organization_description");

                    b.Property<string>("OrganizationEmail")
                        .HasColumnType("text")
                        .HasColumnName("organization_email");

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organization_name");

                    b.Property<string>("OrganizationPhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("organization_phone_number");

                    b.Property<string>("StateID")
                        .HasColumnType("text")
                        .HasColumnName("state_id");

                    b.Property<string>("StatusId")
                        .HasColumnType("text")
                        .HasColumnName("status_id");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("organization", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationClassification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.ToTable("organization_classification", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organization_comment", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("legal_name");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("RelationshipId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("relationship_id");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RelationshipId");

                    b.ToTable("organization_contact", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationLabel", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasColumnType("character varying(25)")
                        .HasColumnName("organization_id");

                    b.Property<string>("LabelId")
                        .HasColumnType("text")
                        .HasColumnName("label_id");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("OrganizationId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("organization_label", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.ToTable("organization_status", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.ToTable("organization_type", "org");
                });

            modelBuilder.Entity("Cohub.Data.Org.Relationship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.ToTable("relationship", "org");
                });

            modelBuilder.Entity("Cohub.Data.Pg.Column", b =>
                {
                    b.Property<int?>("CharacterMaximumLength")
                        .HasColumnType("integer")
                        .HasColumnName("character_maximum_length");

                    b.Property<int?>("CharacterOctetLength")
                        .HasColumnType("integer")
                        .HasColumnName("character_octet_length");

                    b.Property<string>("CharacterSetCatalog")
                        .HasColumnType("text")
                        .HasColumnName("character_set_catalog");

                    b.Property<string>("CharacterSetName")
                        .HasColumnType("text")
                        .HasColumnName("character_set_name");

                    b.Property<string>("CharacterSetSchema")
                        .HasColumnType("text")
                        .HasColumnName("character_set_schema");

                    b.Property<string>("CollationCatalog")
                        .HasColumnType("text")
                        .HasColumnName("collation_catalog");

                    b.Property<string>("CollationName")
                        .HasColumnType("text")
                        .HasColumnName("collation_name");

                    b.Property<string>("CollationSchema")
                        .HasColumnType("text")
                        .HasColumnName("collation_schema");

                    b.Property<string>("ColumnDefault")
                        .HasColumnType("text")
                        .HasColumnName("column_default");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<string>("DataType")
                        .HasColumnType("text")
                        .HasColumnName("data_type");

                    b.Property<int?>("DatetimePrecision")
                        .HasColumnType("integer")
                        .HasColumnName("datetime_precision");

                    b.Property<string>("DomainCatalog")
                        .HasColumnType("text")
                        .HasColumnName("domain_catalog");

                    b.Property<string>("DomainName")
                        .HasColumnType("text")
                        .HasColumnName("domain_name");

                    b.Property<string>("DomainSchema")
                        .HasColumnType("text")
                        .HasColumnName("domain_schema");

                    b.Property<string>("DtdIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("dtd_identifier");

                    b.Property<string>("GenerationExpression")
                        .HasColumnType("text")
                        .HasColumnName("generation_expression");

                    b.Property<string>("IdentityCycle")
                        .HasColumnType("text")
                        .HasColumnName("identity_cycle");

                    b.Property<string>("IdentityGeneration")
                        .HasColumnType("text")
                        .HasColumnName("identity_generation");

                    b.Property<string>("IdentityIncrement")
                        .HasColumnType("text")
                        .HasColumnName("identity_increment");

                    b.Property<string>("IdentityMaximum")
                        .HasColumnType("text")
                        .HasColumnName("identity_maximum");

                    b.Property<string>("IdentityMinimum")
                        .HasColumnType("text")
                        .HasColumnName("identity_minimum");

                    b.Property<string>("IdentityStart")
                        .HasColumnType("text")
                        .HasColumnName("identity_start");

                    b.Property<int?>("IntervalPrecision")
                        .HasColumnType("integer")
                        .HasColumnName("interval_precision");

                    b.Property<string>("IntervalType")
                        .HasColumnType("text")
                        .HasColumnName("interval_type");

                    b.Property<string>("IsGenerated")
                        .HasColumnType("text")
                        .HasColumnName("is_generated");

                    b.Property<string>("IsIdentity")
                        .HasColumnType("text")
                        .HasColumnName("is_identity");

                    b.Property<string>("IsNullable")
                        .HasColumnType("text")
                        .HasColumnName("is_nullable");

                    b.Property<string>("IsSelfReferencing")
                        .HasColumnType("text")
                        .HasColumnName("is_self_referencing");

                    b.Property<string>("IsUpdatable")
                        .HasColumnType("text")
                        .HasColumnName("is_updatable");

                    b.Property<int?>("MaximumCardinality")
                        .HasColumnType("integer")
                        .HasColumnName("maximum_cardinality");

                    b.Property<int?>("NumericPrecision")
                        .HasColumnType("integer")
                        .HasColumnName("numeric_precision");

                    b.Property<int?>("NumericPrecisionRadix")
                        .HasColumnType("integer")
                        .HasColumnName("numeric_precision_radix");

                    b.Property<int?>("NumericScale")
                        .HasColumnType("integer")
                        .HasColumnName("numeric_scale");

                    b.Property<int?>("OrdinalPosition")
                        .HasColumnType("integer")
                        .HasColumnName("ordinal_position");

                    b.Property<string>("ScopeCatalog")
                        .HasColumnType("text")
                        .HasColumnName("scope_catalog");

                    b.Property<string>("ScopeName")
                        .HasColumnType("text")
                        .HasColumnName("scope_name");

                    b.Property<string>("ScopeSchema")
                        .HasColumnType("text")
                        .HasColumnName("scope_schema");

                    b.Property<string>("TableCatalog")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table_catalog");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<string>("TableSchema")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table_schema");

                    b.Property<string>("UdtCatalog")
                        .HasColumnType("text")
                        .HasColumnName("udt_catalog");

                    b.Property<string>("UdtName")
                        .HasColumnType("text")
                        .HasColumnName("udt_name");

                    b.Property<string>("UdtSchema")
                        .HasColumnType("text")
                        .HasColumnName("udt_schema");

                    b.ToTable("columns", "information_schema", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Cohub.Data.Pg.PgView", b =>
                {
                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasColumnName("definition");

                    b.Property<string>("Schemaname")
                        .HasColumnType("text")
                        .HasColumnName("schemaname");

                    b.Property<string>("Viewname")
                        .HasColumnType("text")
                        .HasColumnName("viewname");

                    b.Property<string>("Viewowner")
                        .HasColumnType("text")
                        .HasColumnName("viewowner");

                    b.ToTable("pg_views", "pg_catalog", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Cohub.Data.Pg.Table", b =>
                {
                    b.Property<string>("CommitAction")
                        .HasColumnType("text")
                        .HasColumnName("commit_action");

                    b.Property<string>("IsInsertableInto")
                        .HasColumnType("text")
                        .HasColumnName("is_insertable_into");

                    b.Property<string>("IsTyped")
                        .HasColumnType("text")
                        .HasColumnName("is_typed");

                    b.Property<string>("ReferenceGeneration")
                        .HasColumnType("text")
                        .HasColumnName("reference_generation");

                    b.Property<string>("SelfReferencingColumnName")
                        .HasColumnType("text")
                        .HasColumnName("self_referencing_column_name");

                    b.Property<string>("TableCatalog")
                        .HasColumnType("text")
                        .HasColumnName("table_catalog");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<string>("TableSchema")
                        .HasColumnType("text")
                        .HasColumnName("table_schema");

                    b.Property<string>("TableType")
                        .HasColumnType("text")
                        .HasColumnName("table_type");

                    b.Property<string>("UserDefinedTypeCatalog")
                        .HasColumnType("text")
                        .HasColumnName("user_defined_type_catalog");

                    b.Property<string>("UserDefinedTypeName")
                        .HasColumnType("text")
                        .HasColumnName("user_defined_type_name");

                    b.Property<string>("UserDefinedTypeSchema")
                        .HasColumnType("text")
                        .HasColumnName("user_defined_type_schema");

                    b.ToTable("tables", "information_schema", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Cohub.Data.Pg.TablePrivilege", b =>
                {
                    b.Property<string>("Grantee")
                        .HasColumnType("text")
                        .HasColumnName("grantee");

                    b.Property<string>("Grantor")
                        .HasColumnType("text")
                        .HasColumnName("grantor");

                    b.Property<string>("IsGrantable")
                        .HasColumnType("text")
                        .HasColumnName("is_grantable");

                    b.Property<string>("PrivilegeType")
                        .HasColumnType("text")
                        .HasColumnName("privilege_type");

                    b.Property<string>("TableCatalog")
                        .HasColumnType("text")
                        .HasColumnName("table_catalog");

                    b.Property<string>("TableName")
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<string>("TableSchema")
                        .HasColumnType("text")
                        .HasColumnName("table_schema");

                    b.Property<string>("WithHierarchy")
                        .HasColumnType("text")
                        .HasColumnName("with_hierarchy");

                    b.ToTable("table_privileges", "information_schema", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Cohub.Data.Usr.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("Html")
                        .HasColumnType("text")
                        .HasColumnName("html");

                    b.Property<DateTimeOffset>("Posted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("comment", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.ContactMethodType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("contact_method_type", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ContentType")
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.Property<DateTimeOffset>("Posted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("document", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.ToTable("role", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Initials")
                        .HasColumnType("text")
                        .HasColumnName("initials");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LocaleId")
                        .HasColumnType("text")
                        .HasColumnName("locale_id");

                    b.Property<string>("LowercaseUsername")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasColumnName("lowercase_username")
                        .HasComputedColumnSql("lower(username)", true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text")
                        .HasColumnName("time_zone_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.HasIndex("LowercaseUsername")
                        .IsUnique();

                    b.HasIndex("TimeZoneId");

                    b.ToTable("user", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserContactMethod", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("TypeId")
                        .HasColumnType("text")
                        .HasColumnName("type_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.HasKey("UserId", "TypeId", "Value");

                    b.HasIndex("TypeId");

                    b.ToTable("user_contact_method", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserLogin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Issuer")
                        .HasColumnType("text")
                        .HasColumnName("issuer");

                    b.Property<string>("Sub")
                        .HasColumnType("text")
                        .HasColumnName("sub");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.HasKey("UserId", "Issuer", "Sub");

                    b.ToTable("user_login", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserMention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("comment_id");

                    b.Property<bool>("Unread")
                        .HasColumnType("boolean")
                        .HasColumnName("unread");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("user_mention", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role", "usr");
                });

            modelBuilder.Entity("Cohub.Data.Fin.AssessmentFiling", b =>
                {
                    b.HasBaseType("Cohub.Data.Fin.Filing");

                    b.Property<decimal>("AssessmentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("assessment_amount");

                    b.HasDiscriminator().HasValue("AssessmentFiling");
                });

            modelBuilder.Entity("Cohub.Data.Fin.FeeFiling", b =>
                {
                    b.HasBaseType("Cohub.Data.Fin.Filing");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("fee_amount");

                    b.HasDiscriminator().HasValue("FeeFiling");
                });

            modelBuilder.Entity("Cohub.Data.Fin.TaxFiling", b =>
                {
                    b.HasBaseType("Cohub.Data.Fin.Filing");

                    b.Property<decimal>("ExcessTax")
                        .HasColumnType("numeric")
                        .HasColumnName("excess_tax");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("taxable_amount");

                    b.HasDiscriminator().HasValue("TaxFiling");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Batch", b =>
                {
                    b.HasOne("Cohub.Data.Usr.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Cohub.Data.Fin.BatchComment", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Batch", "Batch")
                        .WithMany("BatchComments")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.Comment", "Comment")
                        .WithMany("BatchComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("Comment");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Filing", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Return", "Return")
                        .WithMany("Filings")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Cohub.Data.Fin.FilingSchedule", b =>
                {
                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany("FilingSchedules")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.PaymentChart", "PaymentChart")
                        .WithMany("FilingSchedules")
                        .HasForeignKey("PaymentChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("PaymentChart");
                });

            modelBuilder.Entity("Cohub.Data.Fin.PaymentChart", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");

                    b.Navigation("Frequency");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Cohub.Data.Fin.PaymentConfiguration", b =>
                {
                    b.HasOne("Cohub.Data.Fin.PaymentChart", "PaymentChart")
                        .WithMany("Configurations")
                        .HasForeignKey("PaymentChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentChart");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Period", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Frequency", "Frequency")
                        .WithMany("Periods")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Frequency");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Return", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Category", "Category")
                        .WithMany("Returns")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany("Returns")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Period", "Period")
                        .WithMany("Returns")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.ReturnStatus", "Status")
                        .WithMany("Returns")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Organization");

                    b.Navigation("Period");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Cohub.Data.Fin.ReturnComment", b =>
                {
                    b.HasOne("Cohub.Data.Usr.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Return", "Return")
                        .WithMany()
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Cohub.Data.Fin.ReturnLabel", b =>
                {
                    b.HasOne("Cohub.Data.Org.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Return", "Return")
                        .WithMany()
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Statement", b =>
                {
                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany("Statements")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Cohub.Data.Fin.StatementComment", b =>
                {
                    b.HasOne("Cohub.Data.Usr.Comment", "Comment")
                        .WithMany("StatementComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Statement", "Statement")
                        .WithMany("StatementComments")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Cohub.Data.Fin.StatementDue", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Bucket", null)
                        .WithMany("StatementDetails")
                        .HasForeignKey("BucketId");

                    b.HasOne("Cohub.Data.Fin.Period", null)
                        .WithMany("StatementDetails")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Return", null)
                        .WithMany("StatementDetails")
                        .HasForeignKey("ReturnId");

                    b.HasOne("Cohub.Data.Fin.Statement", "Statement")
                        .WithMany("Dues")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.StatementReasonCode", null)
                        .WithMany("StatementDetails")
                        .HasForeignKey("StatementReasonCodeId");

                    b.HasOne("Cohub.Data.Fin.Subcategory", null)
                        .WithMany("StatementDetails")
                        .HasForeignKey("SubcategoryId");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Transaction", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Batch", "Batch")
                        .WithMany("Transactions")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("Cohub.Data.Fin.TransactionDetail", b =>
                {
                    b.HasOne("Cohub.Data.Fin.Bucket", "Bucket")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Category", "Category")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Period", "Period")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Subcategory", "Subcategory")
                        .WithMany("TransactionDetails")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Fin.Transaction", "Transaction")
                        .WithMany("Details")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bucket");

                    b.Navigation("Category");

                    b.Navigation("Organization");

                    b.Navigation("Period");

                    b.Navigation("Subcategory");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Cohub.Data.Ins.Report", b =>
                {
                    b.HasOne("Cohub.Data.Usr.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Ins.QueryDefinition", "QueryDefinition")
                        .WithMany()
                        .HasForeignKey("QueryDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("QueryDefinition");
                });

            modelBuilder.Entity("Cohub.Data.Lic.License", b =>
                {
                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany("Licenses")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Lic.LicenseType", "Type")
                        .WithMany("Licenses")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Cohub.Data.Org.Label", b =>
                {
                    b.HasOne("Cohub.Data.Usr.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Cohub.Data.Org.Organization", b =>
                {
                    b.HasOne("Cohub.Data.Org.OrganizationClassification", "Classification")
                        .WithMany("Organizations")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Org.OrganizationStatus", "Status")
                        .WithMany("Organizations")
                        .HasForeignKey("StatusId");

                    b.HasOne("Cohub.Data.Org.OrganizationType", "Type")
                        .WithMany("Organizations")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cohub.Data.Geo.Address", "MailingAddress", b1 =>
                        {
                            b1.Property<string>("OrganizationId")
                                .HasColumnType("character varying(25)")
                                .HasColumnName("id");

                            b1.Property<string>("AddressLines")
                                .HasColumnType("text")
                                .HasColumnName("mailing_address_address_lines");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("mailing_address_city");

                            b1.Property<string>("FullAddress")
                                .HasColumnType("text")
                                .HasColumnName("mailing_address_full_address");

                            b1.Property<bool>("IsEmpty")
                                .HasColumnType("boolean")
                                .HasColumnName("mailing_address_is_empty");

                            b1.Property<string>("MultilineAddress")
                                .HasColumnType("text")
                                .HasColumnName("mailing_address_multiline_address");

                            b1.Property<string>("StateId")
                                .HasColumnType("text")
                                .HasColumnName("mailing_address_state_id");

                            b1.Property<string>("Zip")
                                .HasColumnType("text")
                                .HasColumnName("mailing_address_zip");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("organization");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.OwnsOne("Cohub.Data.Geo.Address", "PhysicalAddress", b1 =>
                        {
                            b1.Property<string>("OrganizationId")
                                .HasColumnType("character varying(25)")
                                .HasColumnName("id");

                            b1.Property<string>("AddressLines")
                                .HasColumnType("text")
                                .HasColumnName("physical_address_address_lines");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("physical_address_city");

                            b1.Property<string>("FullAddress")
                                .HasColumnType("text")
                                .HasColumnName("physical_address_full_address");

                            b1.Property<bool>("IsEmpty")
                                .HasColumnType("boolean")
                                .HasColumnName("physical_address_is_empty");

                            b1.Property<string>("MultilineAddress")
                                .HasColumnType("text")
                                .HasColumnName("physical_address_multiline_address");

                            b1.Property<string>("StateId")
                                .HasColumnType("text")
                                .HasColumnName("physical_address_state_id");

                            b1.Property<string>("Zip")
                                .HasColumnType("text")
                                .HasColumnName("physical_address_zip");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("organization");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("Classification");

                    b.Navigation("CreatedBy");

                    b.Navigation("MailingAddress");

                    b.Navigation("PhysicalAddress");

                    b.Navigation("Status");

                    b.Navigation("Type");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationComment", b =>
                {
                    b.HasOne("Cohub.Data.Usr.Comment", "Comment")
                        .WithMany("OrganizationComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany("Comments")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Comment");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationContact", b =>
                {
                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Org.Relationship", "Relationship")
                        .WithMany("OrganizationContacts")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Cohub.Data.Geo.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrganizationContactId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("AddressLines")
                                .HasColumnType("text")
                                .HasColumnName("address_address_lines");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("FullAddress")
                                .HasColumnType("text")
                                .HasColumnName("address_full_address");

                            b1.Property<bool>("IsEmpty")
                                .HasColumnType("boolean")
                                .HasColumnName("address_is_empty");

                            b1.Property<string>("MultilineAddress")
                                .HasColumnType("text")
                                .HasColumnName("address_multiline_address");

                            b1.Property<string>("StateId")
                                .HasColumnType("text")
                                .HasColumnName("address_state_id");

                            b1.Property<string>("Zip")
                                .HasColumnType("text")
                                .HasColumnName("address_zip");

                            b1.HasKey("OrganizationContactId");

                            b1.ToTable("organization_contact");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationContactId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Organization");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationLabel", b =>
                {
                    b.HasOne("Cohub.Data.Org.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Org.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Cohub.Data.Usr.Comment", b =>
                {
                    b.HasOne("Cohub.Data.Usr.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Cohub.Data.Usr.Document", b =>
                {
                    b.HasOne("Cohub.Data.Usr.User", "Owner")
                        .WithMany("Documents")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cohub.Data.Usr.User", b =>
                {
                    b.HasOne("Cohub.Data.Geo.Locale", "Locale")
                        .WithMany("Users")
                        .HasForeignKey("LocaleId");

                    b.HasOne("Cohub.Data.Geo.Tz", "TimeZone")
                        .WithMany("Users")
                        .HasForeignKey("TimeZoneId");

                    b.Navigation("Locale");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserContactMethod", b =>
                {
                    b.HasOne("Cohub.Data.Usr.ContactMethodType", "Type")
                        .WithMany("UserContactMethods")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "User")
                        .WithMany("ContactMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserLogin", b =>
                {
                    b.HasOne("Cohub.Data.Usr.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserMention", b =>
                {
                    b.HasOne("Cohub.Data.Usr.Comment", "Comment")
                        .WithMany("UserMentions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "User")
                        .WithMany("UserMentions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cohub.Data.Usr.UserRole", b =>
                {
                    b.HasOne("Cohub.Data.Usr.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cohub.Data.Usr.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Batch", b =>
                {
                    b.Navigation("BatchComments");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Bucket", b =>
                {
                    b.Navigation("StatementDetails");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Category", b =>
                {
                    b.Navigation("Returns");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Frequency", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("Cohub.Data.Fin.PaymentChart", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("FilingSchedules");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Period", b =>
                {
                    b.Navigation("Returns");

                    b.Navigation("StatementDetails");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Return", b =>
                {
                    b.Navigation("Filings");

                    b.Navigation("StatementDetails");
                });

            modelBuilder.Entity("Cohub.Data.Fin.ReturnStatus", b =>
                {
                    b.Navigation("Returns");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Statement", b =>
                {
                    b.Navigation("Dues");

                    b.Navigation("StatementComments");
                });

            modelBuilder.Entity("Cohub.Data.Fin.StatementReasonCode", b =>
                {
                    b.Navigation("StatementDetails");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Subcategory", b =>
                {
                    b.Navigation("StatementDetails");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Cohub.Data.Fin.Transaction", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("Cohub.Data.Geo.Locale", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Cohub.Data.Geo.Tz", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Cohub.Data.Lic.LicenseType", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("Cohub.Data.Org.Organization", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Contacts");

                    b.Navigation("FilingSchedules");

                    b.Navigation("Licenses");

                    b.Navigation("Returns");

                    b.Navigation("Statements");

                    b.Navigation("TransactionDetails");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationClassification", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationStatus", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Cohub.Data.Org.OrganizationType", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Cohub.Data.Org.Relationship", b =>
                {
                    b.Navigation("OrganizationContacts");
                });

            modelBuilder.Entity("Cohub.Data.Usr.Comment", b =>
                {
                    b.Navigation("BatchComments");

                    b.Navigation("OrganizationComments");

                    b.Navigation("StatementComments");

                    b.Navigation("UserMentions");
                });

            modelBuilder.Entity("Cohub.Data.Usr.ContactMethodType", b =>
                {
                    b.Navigation("UserContactMethods");
                });

            modelBuilder.Entity("Cohub.Data.Usr.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContactMethods");

                    b.Navigation("Documents");

                    b.Navigation("Logins");

                    b.Navigation("UserMentions");
                });
#pragma warning restore 612, 618
        }
    }
}
